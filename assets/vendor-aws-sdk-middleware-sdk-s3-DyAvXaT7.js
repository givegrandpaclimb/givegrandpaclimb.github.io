import{N as e}from"./vendor-smithy-smithy-client-D81FrGKs.js";import{a as t,H as s}from"./vendor-smithy-protocol-http-D-24QeOr.js";import{h as r,o as n}from"./vendor-smithy-core-Eai9z2ch.js";import{S as i}from"./vendor-smithy-signature-v4-CFRlPt2D.js";import{s as a}from"./vendor-aws-sdk-core-B17qvS2b.js";import{g as o}from"./vendor-smithy-util-middleware-I6Z6a_gz.js";import{b as c,h as d}from"./vendor-smithy-util-stream--lqQ3djc.js";import{v as l}from"./vendor-aws-sdk-util-arn-parser-D1Tz_AIW.js";const p={step:"finalizeRequest",tags:["CHECK_CONTENT_LENGTH_HEADER"],name:"getCheckContentLengthHeaderPlugin",override:!0},u=s=>({applyToStack:s=>{s.add((s,r)=>async n=>{const{request:i}=n;if(t.isInstance(i)&&!("content-length"in i.headers)&&!("x-amz-decoded-content-length"in i.headers)){const t="Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.";"function"!=typeof r?.logger?.warn||r.logger instanceof e||r.logger.warn(t)}return s({...n})},p)}}),h={tags:["REGION_REDIRECT","S3"],name:"regionRedirectEndpointMiddleware",override:!0,relation:"before",toMiddleware:"endpointV2Middleware"},g={step:"initialize",tags:["REGION_REDIRECT","S3"],name:"regionRedirectMiddleware",override:!0},y=e=>({applyToStack:t=>{var s;t.add(function(e){return(t,s)=>async r=>{try{return await t(r)}catch(n){if(e.followRegionRedirects){const a=n?.$metadata?.httpStatusCode,o="HeadBucketCommand"===s.commandName,c=n?.$response?.headers?.["x-amz-bucket-region"];if(c&&(301===a||400===a&&("IllegalLocationConstraintException"===n?.name||o))){try{const t=c;s.logger?.debug(`Redirecting from ${await e.region()} to ${t}`),s.__s3RegionRedirect=t}catch(i){throw new Error("Region redirect failed: "+i)}return t(r)}}throw n}}}(e),g),t.addRelativeTo((s=e,(e,t)=>async r=>{const n=await s.region(),i=s.region;let a=()=>{};t.__s3RegionRedirect&&(Object.defineProperty(s,"region",{writable:!1,value:async()=>t.__s3RegionRedirect}),a=()=>Object.defineProperty(s,"region",{writable:!0,value:i}));try{const i=await e(r);if(t.__s3RegionRedirect&&(a(),n!==await s.region()))throw new Error("Region was not restored following S3 region redirect.");return i}catch(o){throw a(),o}}),h)}}),w={tags:["S3"],name:"s3ExpiresMiddleware",override:!0,relation:"after",toMiddleware:"deserializerMiddleware"},m=e=>({applyToStack:e=>{e.addRelativeTo((e,t)=>async n=>{const i=await e(n),{response:a}=i;if(s.isInstance(a)&&a.headers.expires){a.headers.expiresstring=a.headers.expires;try{r(a.headers.expires)}catch(o){t.logger?.warn(`AWS SDK Warning for ${t.clientName}::${t.commandName} response parsing (${a.headers.expires}): ${o}`),delete a.headers.expires}}return i},w)}});class f{data;lastPurgeTime=Date.now();static EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS=3e4;constructor(e={}){this.data=e}get(e){const t=this.data[e];if(t)return t}set(e,t){return this.data[e]=t,t}delete(e){delete this.data[e]}async purgeExpired(){const e=Date.now();if(!(this.lastPurgeTime+f.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS>e))for(const t in this.data){const s=this.data[t];if(!s.isRefreshing){const r=await s.identity;r.expiration&&r.expiration.getTime()<e&&delete this.data[t]}}}}class E{_identity;isRefreshing;accessed;constructor(e,t=!1,s=Date.now()){this._identity=e,this.isRefreshing=t,this.accessed=s}get identity(){return this.accessed=Date.now(),this._identity}}class R{createSessionFn;cache;static REFRESH_WINDOW_MS=6e4;constructor(e,t=new f){this.createSessionFn=e,this.cache=t}async getS3ExpressIdentity(e,t){const s=t.Bucket,{cache:r}=this,n=r.get(s);return n?n.identity.then(e=>(e.expiration?.getTime()??0)<Date.now()?r.set(s,new E(this.getIdentity(s))).identity:((e.expiration?.getTime()??0)<Date.now()+R.REFRESH_WINDOW_MS&&!n.isRefreshing&&(n.isRefreshing=!0,this.getIdentity(s).then(e=>{r.set(s,new E(Promise.resolve(e)))})),e)):r.set(s,new E(this.getIdentity(s))).identity}async getIdentity(e){await this.cache.purgeExpired().catch(e=>{});const t=await this.createSessionFn(e);if(!t.Credentials?.AccessKeyId||!t.Credentials?.SecretAccessKey)throw new Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");return{accessKeyId:t.Credentials.AccessKeyId,secretAccessKey:t.Credentials.SecretAccessKey,sessionToken:t.Credentials.SessionToken,expiration:t.Credentials.Expiration?new Date(t.Credentials.Expiration):void 0}}}const S="X-Amz-S3session-Token",k=S.toLowerCase();class T extends i{async signWithCredentials(e,t,s){const r=v(t);return e.headers[k]=t.sessionToken,x(this,r),this.signRequest(e,s??{})}async presignWithCredentials(e,t,s){const r=v(t);return delete e.headers[k],e.headers[S]=t.sessionToken,e.query=e.query??{},e.query[S]=t.sessionToken,x(this,r),this.presign(e,s)}}function v(e){return{accessKeyId:e.accessKeyId,secretAccessKey:e.secretAccessKey,expiration:e.expiration}}function x(e,t){const s=setTimeout(()=>{throw new Error("SignatureV4S3Express credential override was created but not called.")},10),r=e.credentialProvider;e.credentialProvider=()=>(clearTimeout(s),e.credentialProvider=r,Promise.resolve(t))}const I={name:"s3ExpressMiddleware",step:"build",tags:["S3","S3_EXPRESS"],override:!0},C=e=>({applyToStack:s=>{s.add((e=>(s,r)=>async n=>{if(r.endpointV2){const s=r.endpointV2,i="sigv4-s3express"===s.properties?.authSchemes?.[0]?.name;if(("S3Express"===s.properties?.backend||"Directory"===s.properties?.bucketType)&&(a(r,"S3_EXPRESS_BUCKET","J"),r.isS3ExpressBucket=!0),i){const s=n.input.Bucket;if(s){const i=await e.s3ExpressIdentityProvider.getS3ExpressIdentity(await e.credentials(),{Bucket:s});r.s3ExpressIdentity=i,t.isInstance(n.request)&&i.sessionToken&&(n.request.headers[k]=i.sessionToken)}}}return s(n)})(e),I)}}),_=e=>e=>{throw e},b=(e,t)=>{},A=e=>({applyToStack:s=>{s.addRelativeTo((e=>(s,r)=>async n=>{if(!t.isInstance(n.request))return s(n);const i=o(r).selectedHttpAuthScheme;if(!i)throw new Error("No HttpAuthScheme was selected: unable to sign request");const{httpAuthOption:{signingProperties:a={}},identity:c,signer:d}=i;let l;l=r.s3ExpressIdentity?await(async(e,t,s,r)=>{const n=await r.signWithCredentials(s,e,{});if(n.headers["X-Amz-Security-Token"]||n.headers["x-amz-security-token"])throw new Error("X-Amz-Security-Token must not be set for s3-express requests.");return n})(r.s3ExpressIdentity,0,n.request,await e.signer()):await d.sign(n.request,c,a);const p=await s({...n,request:l}).catch((d.errorHandler||_)(a));return(d.successHandler||b)(p.response,a),p})(e),n)}}),P=(e,{session:t})=>{const[s,r]=t,{forcePathStyle:n,useAccelerateEndpoint:i,disableMultiregionAccessPoints:a,followRegionRedirects:o,s3ExpressIdentityProvider:c,bucketEndpoint:d}=e;return Object.assign(e,{forcePathStyle:n??!1,useAccelerateEndpoint:i??!1,disableMultiregionAccessPoints:a??!1,followRegionRedirects:o??!1,s3ExpressIdentityProvider:c??new R(async e=>s().send(new r({Bucket:e}))),bucketEndpoint:d??!1})},M={CopyObjectCommand:!0,UploadPartCopyCommand:!0,CompleteMultipartUploadCommand:!0},N={relation:"after",toMiddleware:"deserializerMiddleware",tags:["THROW_200_EXCEPTIONS","S3"],name:"throw200ExceptionsMiddleware",override:!0},D=e=>({applyToStack:t=>{t.addRelativeTo((e=>(t,r)=>async n=>{const i=await t(n),{response:a}=i;if(!s.isInstance(a))return i;const{statusCode:o,body:l}=a;if(o<200||o>=300)return i;if("function"!=typeof l?.stream&&"function"!=typeof l?.pipe&&"function"!=typeof l?.tee)return i;let p=l,u=l;!l||"object"!=typeof l||l instanceof Uint8Array||([p,u]=await c(l)),a.body=u;const h=await((e=new Uint8Array,t)=>e instanceof Uint8Array?Promise.resolve(e):t.streamCollector(e)||Promise.resolve(new Uint8Array))(p,{streamCollector:async e=>d(e,3e3)});"function"==typeof p?.destroy&&p.destroy();const g=e.utf8Encoder(h.subarray(h.length-16));if(0===h.length&&M[r.commandName]){const e=new Error("S3 aborted request");throw e.name="InternalError",e}return g&&g.endsWith("</Error>")&&(a.statusCode=400),i})(e),N)}}),q={name:"bucketEndpointMiddleware",override:!0,relation:"after",toMiddleware:"endpointV2Middleware"},K={step:"initialize",tags:["VALIDATE_BUCKET_NAME"],name:"validateBucketNameMiddleware",override:!0},j=e=>({applyToStack:t=>{t.add(function({bucketEndpoint:e}){return t=>async s=>{const{input:{Bucket:r}}=s;if(!e&&"string"==typeof r&&!l(r)&&r.indexOf("/")>=0){const e=new Error(`Bucket name shouldn't contain '/', received '${r}'`);throw e.name="InvalidBucketName",e}return t({...s})}}(e),K),t.addRelativeTo(function(e){return(t,s)=>async r=>{if(e.bucketEndpoint){const e=s.endpointV2;if(e){const t=r.input.Bucket;if("string"==typeof t)try{const r=new URL(t);s.endpointV2={...e,url:r}}catch(n){const e=`@aws-sdk/middleware-sdk-s3: bucketEndpoint=true was set but Bucket=${t} could not be parsed as URL.`;throw"NoOpLogger"===s.logger?.constructor?.name||s.logger?.warn?.(e),n}}}return t(r)}}(e),q)}});export{T as S,j as a,y as b,C as c,A as d,m as e,u as f,D as g,P as r};
