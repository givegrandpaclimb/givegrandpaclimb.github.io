import{p as e}from"./vendor-lezer-python-CSIS3yik.js";import{L as r,s as t,c as n,d as o,f as i,h as a,k as s}from"./vendor-codemirror-language-D9Y_sbSd.js";import{a as l,I as m}from"./vendor-lezer-common-BNyJYURD.js";import{i as c,c as d,s as p}from"./vendor-codemirror-autocomplete-C7UoMGhy.js";import"./vendor-lezer-lr-CnaH20hO.js";import"./vendor-lezer-highlight-BtpKku1v.js";import"./vendor-codemirror-state-d-AKQu11.js";import"./vendor-marijn-find-cluster-break-Dub_CRYN.js";import"./vendor-codemirror-view-CwWsG3pM.js";import"./vendor-style-mod-_NPnILvn.js";import"./vendor-w3c-keyname-f-y9tSbI.js";const f=new l,u=new Set(["Script","Body","FunctionDefinition","ClassDefinition","LambdaExpression","ForStatement","MatchClause"]);function E(e){return(r,t,n)=>{if(n)return!1;let o=r.node.getChild("VariableName");return o&&t(o,e),!0}}const b={FunctionDefinition:E("function"),ClassDefinition:E("class"),ForStatement(e,r,t){if(t)for(let n=e.node.firstChild;n;n=n.nextSibling)if("VariableName"==n.name)r(n,"variable");else if("in"==n.name)break},ImportStatement(e,r){var t,n;let{node:o}=e,i="from"==(null===(t=o.firstChild)||void 0===t?void 0:t.name);for(let a=o.getChild("import");a;a=a.nextSibling)"VariableName"==a.name&&"as"!=(null===(n=a.nextSibling)||void 0===n?void 0:n.name)&&r(a,i?"variable":"namespace")},AssignStatement(e,r){for(let t=e.node.firstChild;t;t=t.nextSibling)if("VariableName"==t.name)r(t,"variable");else if(":"==t.name||"AssignOp"==t.name)break},ParamList(e,r){for(let t=null,n=e.node.firstChild;n;n=n.nextSibling)"VariableName"!=n.name||t&&/\*|AssignOp/.test(t.name)||r(n,"variable"),t=n},CapturePattern:E("variable"),AsPattern:E("variable"),__proto__:null};function y(e,r){let t=f.get(r);if(t)return t;let n=[],o=!0;function i(r,t){let o=e.sliceString(r.from,r.to);n.push({label:o,type:t})}return r.cursor(m.IncludeAnonymous).iterate(r=>{if(r.name){let e=b[r.name];if(e&&e(r,i,o)||!o&&u.has(r.name))return!1;o=!1}else if(r.to-r.from>8192){for(let t of y(e,r.node))n.push(t);return!1}}),f.set(r,n),n}const x=/^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/,g=["String","FormatString","Comment","PropertyName"];function _(e){let r=t(e.state).resolveInner(e.pos,-1);if(g.indexOf(r.name)>-1)return null;let n="VariableName"==r.name||r.to-r.from<20&&x.test(e.state.sliceDoc(r.from,r.to));if(!n&&!e.explicit)return null;let o=[];for(let t=r;t;t=t.parent)u.has(t.name)&&(o=o.concat(y(e.state.doc,t)));return{options:o,from:n?r.from:e.pos,validFor:x}}const h=["__annotations__","__builtins__","__debug__","__doc__","__import__","__name__","__loader__","__package__","__spec__","False","None","True"].map(e=>({label:e,type:"constant"})).concat(["ArithmeticError","AssertionError","AttributeError","BaseException","BlockingIOError","BrokenPipeError","BufferError","BytesWarning","ChildProcessError","ConnectionAbortedError","ConnectionError","ConnectionRefusedError","ConnectionResetError","DeprecationWarning","EOFError","Ellipsis","EncodingWarning","EnvironmentError","Exception","FileExistsError","FileNotFoundError","FloatingPointError","FutureWarning","GeneratorExit","IOError","ImportError","ImportWarning","IndentationError","IndexError","InterruptedError","IsADirectoryError","KeyError","KeyboardInterrupt","LookupError","MemoryError","ModuleNotFoundError","NameError","NotADirectoryError","NotImplemented","NotImplementedError","OSError","OverflowError","PendingDeprecationWarning","PermissionError","ProcessLookupError","RecursionError","ReferenceError","ResourceWarning","RuntimeError","RuntimeWarning","StopAsyncIteration","StopIteration","SyntaxError","SyntaxWarning","SystemError","SystemExit","TabError","TimeoutError","TypeError","UnboundLocalError","UnicodeDecodeError","UnicodeEncodeError","UnicodeError","UnicodeTranslateError","UnicodeWarning","UserWarning","ValueError","Warning","ZeroDivisionError"].map(e=>({label:e,type:"type"}))).concat(["bool","bytearray","bytes","classmethod","complex","float","frozenset","int","list","map","memoryview","object","range","set","staticmethod","str","super","tuple","type"].map(e=>({label:e,type:"class"}))).concat(["abs","aiter","all","anext","any","ascii","bin","breakpoint","callable","chr","compile","delattr","dict","dir","divmod","enumerate","eval","exec","exit","filter","format","getattr","globals","hasattr","hash","help","hex","id","input","isinstance","issubclass","iter","len","license","locals","max","min","next","oct","open","ord","pow","print","property","quit","repr","reversed","round","setattr","slice","sorted","sum","vars","zip"].map(e=>({label:e,type:"function"}))),v=[p("def ${name}(${params}):\n\t${}",{label:"def",detail:"function",type:"keyword"}),p("for ${name} in ${collection}:\n\t${}",{label:"for",detail:"loop",type:"keyword"}),p("while ${}:\n\t${}",{label:"while",detail:"loop",type:"keyword"}),p("try:\n\t${}\nexcept ${error}:\n\t${}",{label:"try",detail:"/ except block",type:"keyword"}),p("if ${}:\n\t\n",{label:"if",detail:"block",type:"keyword"}),p("if ${}:\n\t${}\nelse:\n\t${}",{label:"if",detail:"/ else block",type:"keyword"}),p("class ${name}:\n\tdef __init__(self, ${params}):\n\t\t\t${}",{label:"class",detail:"definition",type:"keyword"}),p("import ${module}",{label:"import",detail:"statement",type:"keyword"}),p("from ${module} import ${names}",{label:"from",detail:"import",type:"keyword"})],S=c(g,d(h.concat(v)));function I(e){let{node:r,pos:t}=e,n=e.lineIndent(t,-1),o=null;for(;;){let i=r.childBefore(t);if(!i)break;if("Comment"==i.name)t=i.from;else if("Body"==i.name||"MatchBody"==i.name)e.baseIndentFor(i)+e.unit<=n&&(o=i),r=i;else if("MatchClause"==i.name)r=i;else{if(!i.type.is("Statement"))break;r=i}}return o}function k(e,r){let t=e.baseIndentFor(r),n=e.lineAt(e.pos,-1),o=n.from+n.text.length;return/^\s*($|#)/.test(n.text)&&e.node.to<o+100&&!/\S/.test(e.state.sliceDoc(o,e.node.to))&&e.lineIndent(e.pos,-1)<=t||/^\s*(else:|elif |except |finally:|case\s+[^=:]+:)/.test(e.textAfter)&&e.lineIndent(e.pos,-1)>t?null:t+e.unit}const $=r.define({name:"python",parser:e.configure({props:[o.add({Body:e=>{var r;return null!==(r=k(e,/^\s*(#|$)/.test(e.textAfter)&&I(e)||e.node))&&void 0!==r?r:e.continue()},MatchBody:e=>{var r;return null!==(r=k(e,I(e)||e.node))&&void 0!==r?r:e.continue()},IfStatement:e=>/^\s*(else:|elif )/.test(e.textAfter)?e.baseIndent:e.continue(),"ForStatement WhileStatement":e=>/^\s*else:/.test(e.textAfter)?e.baseIndent:e.continue(),TryStatement:e=>/^\s*(except[ :]|finally:|else:)/.test(e.textAfter)?e.baseIndent:e.continue(),MatchStatement:e=>/^\s*case /.test(e.textAfter)?e.baseIndent+e.unit:e.continue(),"TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression":a({closing:")"}),"DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression":a({closing:"}"}),"ArrayExpression ArrayComprehensionExpression":a({closing:"]"}),MemberExpression:e=>e.baseIndent+e.unit,"String FormatString":()=>null,Script:e=>{var r;let t=I(e);return null!==(r=t&&k(e,t))&&void 0!==r?r:e.continue()}}),i.add({"ArrayExpression DictionaryExpression SetExpression TupleExpression":s,Body:(e,r)=>({from:e.from+1,to:e.to-(e.to==r.doc.length?0:1)}),"String FormatString":(e,r)=>({from:r.doc.lineAt(e.from).to,to:e.to})})]}),languageData:{closeBrackets:{brackets:["(","[","{","'",'"',"'''",'"""'],stringPrefixes:["f","fr","rf","r","u","b","br","rb","F","FR","RF","R","U","B","BR","RB"]},commentTokens:{line:"#"},indentOnInput:/^\s*([\}\]\)]|else:|elif |except |finally:|case\s+[^:]*:?)$/}});function A(){return new n($,[$.data.of({autocomplete:_}),$.data.of({autocomplete:S})])}export{S as globalCompletion,_ as localCompletionSource,A as python,$ as pythonLanguage};
