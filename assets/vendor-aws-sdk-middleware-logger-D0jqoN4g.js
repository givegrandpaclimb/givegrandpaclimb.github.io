const e={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},t=t=>({applyToStack:t=>{t.add((e,t)=>async a=>{try{const n=await e(a),{clientName:i,commandName:o,logger:m,dynamoDbDocumentClientOptions:r={}}=t,{overrideInputFilterSensitiveLog:c,overrideOutputFilterSensitiveLog:d}=r,l=c??t.inputFilterSensitiveLog,p=d??t.outputFilterSensitiveLog,{$metadata:s,...g}=n.output;return m?.info?.({clientName:i,commandName:o,input:l(a.input),output:p(g),metadata:s}),n}catch(n){const{clientName:e,commandName:i,logger:o,dynamoDbDocumentClientOptions:m={}}=t,{overrideInputFilterSensitiveLog:r}=m,c=r??t.inputFilterSensitiveLog;throw o?.error?.({clientName:e,commandName:i,input:c(a.input),error:n,metadata:n.$metadata}),n}},e)}});export{t as g};
