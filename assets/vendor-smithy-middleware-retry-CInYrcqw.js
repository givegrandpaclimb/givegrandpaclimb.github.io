import{R as t,A as r,S as e,a as o,I as n,b as a}from"./vendor-smithy-util-retry-CAuqmNWZ.js";import{n as s}from"./vendor-smithy-util-middleware-CiYOBhdT.js";import{i,a as c,b as p}from"./vendor-smithy-service-error-classification-CFH3_hkI.js";import{a as u,H as y}from"./vendor-smithy-protocol-http-BM_qqgGS.js";import{N as m}from"./vendor-smithy-smithy-client-CncVFqAY.js";let f;const d=new Uint8Array(16);function w(){if(!f&&(f="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!f))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return f(d)}const l=[];for(let N=0;N<256;++N)l.push((N+256).toString(16).slice(1));const h={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function R(t,r,e){if(h.randomUUID&&!t)return h.randomUUID();const o=(t=t||{}).random||(t.rng||w)();return o[6]=15&o[6]|64,o[8]=63&o[8]|128,function(t,r=0){return l[t[r+0]]+l[t[r+1]]+l[t[r+2]]+l[t[r+3]]+"-"+l[t[r+4]]+l[t[r+5]]+"-"+l[t[r+6]]+l[t[r+7]]+"-"+l[t[r+8]]+l[t[r+9]]+"-"+l[t[r+10]]+l[t[r+11]]+l[t[r+12]]+l[t[r+13]]+l[t[r+14]]+l[t[r+15]]}(o)}const E=t=>t instanceof Error?t:t instanceof Object?Object.assign(new Error,t):"string"==typeof t?new Error(t):new Error(`AWS SDK error wrapper for ${t}`),b=n=>{const{retryStrategy:a,retryMode:i,maxAttempts:c}=n,p=s(c??o);return Object.assign(n,{maxAttempts:p,retryStrategy:async()=>a||(await s(i)()===t.ADAPTIVE?new r(p):new e(p))})},g=t=>t?.body instanceof ReadableStream,j=t=>{const r={error:t,errorType:v(t)},e=A(t.$response);return e&&(r.retryAfterHint=e),r},v=t=>i(t)?"THROTTLING":c(t)?"TRANSIENT":p(t)?"SERVER_ERROR":"CLIENT_ERROR",S={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},T=t=>({applyToStack:r=>{r.add((t=>(r,e)=>async o=>{let s=await t.retryStrategy();const i=await t.maxAttempts();if(!(t=>void 0!==t.acquireInitialRetryToken&&void 0!==t.refreshRetryTokenForRetry&&void 0!==t.recordSuccess)(s))return s?.mode&&(e.userAgent=[...e.userAgent||[],["cfg/retry-mode",s.mode]]),s.retry(r,o);{let t=await s.acquireInitialRetryToken(e.partition_id),y=new Error,f=0,d=0;const{request:w}=o,l=u.isInstance(w);for(l&&(w.headers[n]=R());;)try{l&&(w.headers[a]=`attempt=${f+1}; max=${i}`);const{response:e,output:n}=await r(o);return s.recordSuccess(t),n.$metadata.attempts=f+1,n.$metadata.totalRetryDelay=d,{response:e,output:n}}catch(c){const r=j(c);if(y=E(c),l&&g(w))throw(e.logger instanceof m?console:e.logger)?.warn("An error was encountered in a non-retryable streaming request."),y;try{t=await s.refreshRetryTokenForRetry(t,r)}catch(p){throw y.$metadata||(y.$metadata={}),y.$metadata.attempts=f+1,y.$metadata.totalRetryDelay=d,y}f=t.getRetryCount();const o=t.getRetryDelay();d+=o,await new Promise(t=>setTimeout(t,o))}}})(t),S)}}),A=t=>{if(!y.isInstance(t))return;const r=Object.keys(t.headers).find(t=>"retry-after"===t.toLowerCase());if(!r)return;const e=t.headers[r],o=Number(e);return Number.isNaN(o)?new Date(e):new Date(1e3*o)};export{T as g,b as r};
