import{p as e}from"./vendor-lezer-rust-qW-wqQ4X.js";import{L as r,c as o,d as t,f as n,e as s,k as m}from"./vendor-codemirror-language-C3hkV707.js";import"./vendor-lezer-lr-CZr-wB1l.js";import"./vendor-lezer-common-QPiu6Hcj.js";import"./vendor-lezer-highlight-4-fykoed.js";import"./vendor-codemirror-state-D88w-V9V.js";import"./vendor-marijn-find-cluster-break-BFVNO93u.js";import"./vendor-codemirror-view-DVzN21hM.js";import"./vendor-style-mod-tLAqh-pC.js";import"./vendor-w3c-keyname-BorKtCV5.js";const i=r.define({name:"rust",parser:e.configure({props:[t.add({IfExpression:s({except:/^\s*({|else\b)/}),"String BlockComment":()=>null,AttributeItem:e=>e.continue(),"Statement MatchArm":s()}),n.add(e=>/(Block|edTokens|List)$/.test(e.name)?m:"BlockComment"==e.name?e=>({from:e.from+2,to:e.to-2}):void 0)]}),languageData:{commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:\{|\})$/,closeBrackets:{stringPrefixes:["b","r","br"]}}});function a(){return new o(i)}export{a as rust,i as rustLanguage};
