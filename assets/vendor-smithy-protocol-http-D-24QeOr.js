const t=t=>({setHttpHandler(e){t.httpHandler=e},httpHandler:()=>t.httpHandler,updateHttpClientConfig(e,s){t.httpHandler?.updateHttpClientConfig(e,s)},httpHandlerConfigs:()=>t.httpHandler.httpHandlerConfigs()}),e=t=>({httpHandler:t.httpHandler()});class s{constructor(t){this.method=t.method||"GET",this.hostname=t.hostname||"localhost",this.port=t.port,this.query=t.query||{},this.headers=t.headers||{},this.body=t.body,this.protocol=t.protocol?":"!==t.protocol.slice(-1)?`${t.protocol}:`:t.protocol:"https:",this.path=t.path?"/"!==t.path.charAt(0)?`/${t.path}`:t.path:"/",this.username=t.username,this.password=t.password,this.fragment=t.fragment}static clone(t){const e=new s({...t,headers:{...t.headers}});var r;return e.query&&(e.query=(r=e.query,Object.keys(r).reduce((t,e)=>{const s=r[e];return{...t,[e]:Array.isArray(s)?[...s]:s}},{}))),e}static isInstance(t){if(!t)return!1;const e=t;return"method"in e&&"protocol"in e&&"hostname"in e&&"path"in e&&"object"==typeof e.query&&"object"==typeof e.headers}clone(){return s.clone(this)}}class r{constructor(t){this.statusCode=t.statusCode,this.reason=t.reason,this.headers=t.headers||{},this.body=t.body}static isInstance(t){if(!t)return!1;const e=t;return"number"==typeof e.statusCode&&"object"==typeof e.headers}}export{r as H,s as a,t as g,e as r};
