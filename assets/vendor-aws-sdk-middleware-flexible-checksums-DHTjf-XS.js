import{s as e}from"./vendor-aws-sdk-core-DSuZb7Cq.js";import{i as r}from"./vendor-smithy-is-array-buffer-DPIx95ez.js";import{A as t}from"./vendor-aws-crypto-crc32c-CQaM7vNN.js";import{A as s}from"./vendor-aws-crypto-crc32-B1UHIl9t.js";import{a}from"./vendor-smithy-util-utf8-xqXQEPn9.js";import{c as o,a as c}from"./vendor-smithy-util-stream-qKluyzXl.js";import{a as n}from"./vendor-smithy-protocol-http-BM_qqgGS.js";import{n as i}from"./vendor-smithy-util-middleware-CiYOBhdT.js";const u="WHEN_SUPPORTED",m=u,d="WHEN_SUPPORTED",h=u;var E,l,C,f;(l=E||(E={})).MD5="MD5",l.CRC32="CRC32",l.CRC32C="CRC32C",l.CRC64NVME="CRC64NVME",l.SHA1="SHA1",l.SHA256="SHA256",(f=C||(C={})).HEADER="header",f.TRAILER="trailer";const k=E.CRC32,w=[E.CRC32,E.CRC32C,E.CRC64NVME,E.SHA1,E.SHA256],S=[E.SHA256,E.SHA1,E.CRC32,E.CRC32C,E.CRC64NVME],p=e=>e===E.MD5?"content-md5":`x-amz-checksum-${e.toLowerCase()}`,b=e=>void 0!==e&&"string"!=typeof e&&!ArrayBuffer.isView(e)&&!r(e),g=(e,r)=>{switch(e){case E.MD5:return r.md5;case E.CRC32:return s;case E.CRC32C:return t;case E.CRC64NVME:throw new Error('Please check whether you have installed the "@aws-sdk/crc64-nvme-crt" package explicitly. \nYou must also register the package by calling [require("@aws-sdk/crc64-nvme-crt");] or an ESM equivalent such as [import "@aws-sdk/crc64-nvme-crt";]. \nFor more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt');case E.SHA1:return r.sha1;case E.SHA256:return r.sha256;default:throw new Error(`Unsupported checksum algorithm: ${e}`)}},_=(e,r)=>{const t=new e;return t.update(a(r||"")),t.digest()},R={name:"flexibleChecksumsMiddleware",step:"build",tags:["BODY_CHECKSUM"],override:!0},M={name:"flexibleChecksumsInputMiddleware",toMiddleware:"serializerMiddleware",relation:"before",tags:["BODY_CHECKSUM"],override:!0},y=(e=[])=>{const r=[];for(const t of S)e.includes(t)&&w.includes(t)&&r.push(t);return r},H=async(e,{checksumAlgorithmFn:r,base64Encoder:t})=>t(await _(r,e)),L={name:"flexibleChecksumsResponseMiddleware",toMiddleware:"deserializerMiddleware",relation:"after",tags:["BODY_CHECKSUM"],override:!0},v=(r,t)=>({applyToStack:s=>{s.add(((r,t)=>(s,a)=>async c=>{if(!n.isInstance(c.request))return s(c);if(((e,r)=>{const t="x-amz-checksum-".toLowerCase();for(const s of Object.keys(r))if(s.toLowerCase().startsWith(t))return!0;return!1})(0,c.request.headers))return s(c);const{request:i,input:m}=c,{body:d,headers:h}=i,{base64Encoder:l,streamHasher:C}=r,{requestChecksumRequired:f,requestAlgorithmMember:S}=t,R=await r.requestChecksumCalculation(),M=S?.name,y=S?.httpHeader;M&&!m[M]&&(R===u||f)&&(m[M]=k,y&&(h[y]=k));const H=((e,{requestChecksumRequired:r,requestAlgorithmMember:t,requestChecksumCalculation:s})=>{if(!t)return s===u||r?k:void 0;if(!e[t])return;const a=e[t];if(!w.includes(a))throw new Error(`The checksum algorithm "${a}" is not supported by the client. Select one of ${w}.`);return a})(m,{requestChecksumRequired:f,requestAlgorithmMember:S?.name,requestChecksumCalculation:R});let L=d,v=h;if(H){switch(H){case E.CRC32:e(a,"FLEXIBLE_CHECKSUMS_REQ_CRC32","U");break;case E.CRC32C:e(a,"FLEXIBLE_CHECKSUMS_REQ_CRC32C","V");break;case E.CRC64NVME:e(a,"FLEXIBLE_CHECKSUMS_REQ_CRC64","W");break;case E.SHA1:e(a,"FLEXIBLE_CHECKSUMS_REQ_SHA1","X");break;case E.SHA256:e(a,"FLEXIBLE_CHECKSUMS_REQ_SHA256","Y")}const t=p(H),s=g(H,r);if(b(d)){const{getAwsChunkedEncodingStream:e,bodyLengthChecker:c}=r;L=e("number"==typeof r.requestStreamBufferSize&&r.requestStreamBufferSize>=8192?o(d,r.requestStreamBufferSize,a.logger):d,{base64Encoder:l,bodyLengthChecker:c,checksumLocationName:t,checksumAlgorithmFn:s,streamHasher:C}),v={...h,"content-encoding":h["content-encoding"]?`${h["content-encoding"]},aws-chunked`:"aws-chunked","transfer-encoding":"chunked","x-amz-decoded-content-length":h["content-length"],"x-amz-content-sha256":"STREAMING-UNSIGNED-PAYLOAD-TRAILER","x-amz-trailer":t},delete v["content-length"]}else if(!((e,r)=>{const t=e.toLowerCase();for(const s of Object.keys(r))if(t===s.toLowerCase())return!0;return!1})(t,h)){const e=await _(s,d);v={...h,[t]:l(e)}}}return await s({...c,request:{...i,headers:v,body:L}})})(r,t),R),s.addRelativeTo(((r,t)=>(s,a)=>async o=>{const c=o.input,{requestValidationModeMember:n}=t,i=await r.requestChecksumCalculation(),m=await r.responseChecksumValidation();switch(i){case"WHEN_REQUIRED":e(a,"FLEXIBLE_CHECKSUMS_REQ_WHEN_REQUIRED","a");break;case u:e(a,"FLEXIBLE_CHECKSUMS_REQ_WHEN_SUPPORTED","Z")}switch(m){case"WHEN_REQUIRED":e(a,"FLEXIBLE_CHECKSUMS_RES_WHEN_REQUIRED","c");break;case d:e(a,"FLEXIBLE_CHECKSUMS_RES_WHEN_SUPPORTED","b")}return n&&!c[n]&&m===d&&(c[n]="ENABLED"),s(o)})(r,t),M),s.addRelativeTo(((e,r)=>(t,s)=>async a=>{if(!n.isInstance(a.request))return t(a);const o=a.input,i=await t(a),u=i.response,{requestValidationModeMember:m,responseAlgorithms:d}=r;if(m&&"ENABLED"===o[m]){const{clientName:r,commandName:t}=s;if("S3Client"===r&&"GetObjectCommand"===t&&y(d).every(e=>{const r=p(e),t=u.headers[r];return!t||(e=>{const r=e.lastIndexOf("-");if(-1!==r){const t=e.slice(r+1);if(!t.startsWith("0")){const e=parseInt(t,10);if(!isNaN(e)&&e>=1&&e<=1e4)return!0}}return!1})(t)}))return i;await(async(e,{config:r,responseAlgorithms:t,logger:s})=>{const a=y(t),{body:o,headers:n}=e;for(const u of a){const t=p(u),a=n[t];if(a){let n;try{n=g(u,r)}catch(i){if(u===E.CRC64NVME){s?.warn(`Skipping ${E.CRC64NVME} checksum validation: ${i.message}`);continue}throw i}const{base64Encoder:m}=r;if(b(o))return void(e.body=c({expectedChecksum:a,checksumSourceLocation:t,checksum:new n,source:o,base64Encoder:m}));const d=await H(o,{checksumAlgorithmFn:n,base64Encoder:m});if(d===a)break;throw new Error(`Checksum mismatch: expected "${d}" but received "${a}" in response header "${t}".`)}}})(u,{config:e,responseAlgorithms:d,logger:s.logger})}return i})(r,t),L)}}),A=e=>{const{requestChecksumCalculation:r,responseChecksumValidation:t,requestStreamBufferSize:s}=e;return Object.assign(e,{requestChecksumCalculation:i(r??m),responseChecksumValidation:i(t??h),requestStreamBufferSize:Number(s??0)})};export{v as g,A as r};
