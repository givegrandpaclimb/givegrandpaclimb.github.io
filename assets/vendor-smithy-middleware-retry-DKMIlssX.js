import{R as t,A as e,S as r,a,I as o,b as n}from"./vendor-smithy-util-retry-BMAAVQ9q.js";import{n as s}from"./vendor-smithy-util-middleware-I6Z6a_gz.js";import{i,a as c,b as d}from"./vendor-smithy-service-error-classification-IwpPNb5_.js";import{a as y,H as m}from"./vendor-smithy-protocol-http-D-24QeOr.js";import{N as u}from"./vendor-smithy-smithy-client-D81FrGKs.js";let p;const f=new Uint8Array(16);function l(){if(!p&&(p="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!p))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return p(f)}const R=[];for(let j=0;j<256;++j)R.push((j+256).toString(16).slice(1));const w={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function g(t,e,r){if(w.randomUUID&&!t)return w.randomUUID();const a=(t=t||{}).random||(t.rng||l)();return a[6]=15&a[6]|64,a[8]=63&a[8]|128,function(t,e=0){return R[t[e+0]]+R[t[e+1]]+R[t[e+2]]+R[t[e+3]]+"-"+R[t[e+4]]+R[t[e+5]]+"-"+R[t[e+6]]+R[t[e+7]]+"-"+R[t[e+8]]+R[t[e+9]]+"-"+R[t[e+10]]+R[t[e+11]]+R[t[e+12]]+R[t[e+13]]+R[t[e+14]]+R[t[e+15]]}(a)}const h=t=>t instanceof Error?t:t instanceof Object?Object.assign(new Error,t):"string"==typeof t?new Error(t):new Error(`AWS SDK error wrapper for ${t}`),T=o=>{const{retryStrategy:n,retryMode:i,maxAttempts:c}=o,d=s(c??a);return Object.assign(o,{maxAttempts:d,retryStrategy:async()=>n||(await s(i)()===t.ADAPTIVE?new e(d):new r(d))})},b=t=>t?.body instanceof ReadableStream,E=t=>{const e={error:t,errorType:I(t)},r=D(t.$response);return r&&(e.retryAfterHint=r),e},I=t=>i(t)?"THROTTLING":c(t)?"TRANSIENT":d(t)?"SERVER_ERROR":"CLIENT_ERROR",S={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},A=t=>({applyToStack:e=>{e.add((t=>(e,r)=>async a=>{let s=await t.retryStrategy();const i=await t.maxAttempts();if(!(t=>void 0!==t.acquireInitialRetryToken&&void 0!==t.refreshRetryTokenForRetry&&void 0!==t.recordSuccess)(s))return s?.mode&&(r.userAgent=[...r.userAgent||[],["cfg/retry-mode",s.mode]]),s.retry(e,a);{let t=await s.acquireInitialRetryToken(r.partition_id),m=new Error,p=0,f=0;const{request:l}=a,R=y.isInstance(l);for(R&&(l.headers[o]=g());;)try{R&&(l.headers[n]=`attempt=${p+1}; max=${i}`);const{response:r,output:o}=await e(a);return s.recordSuccess(t),o.$metadata.attempts=p+1,o.$metadata.totalRetryDelay=f,{response:r,output:o}}catch(c){const e=E(c);if(m=h(c),R&&b(l))throw(r.logger instanceof u?console:r.logger)?.warn("An error was encountered in a non-retryable streaming request."),m;try{t=await s.refreshRetryTokenForRetry(t,e)}catch(d){throw m.$metadata||(m.$metadata={}),m.$metadata.attempts=p+1,m.$metadata.totalRetryDelay=f,m}p=t.getRetryCount();const a=t.getRetryDelay();f+=a,await new Promise(t=>setTimeout(t,a))}}})(t),S)}}),D=t=>{if(!m.isInstance(t))return;const e=Object.keys(t.headers).find(t=>"retry-after"===t.toLowerCase());if(!e)return;const r=t.headers[e],a=Number(r);return Number.isNaN(a)?new Date(r):new Date(1e3*a)};export{A as g,T as r};
