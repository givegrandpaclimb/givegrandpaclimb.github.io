import{H as e}from"./vendor-smithy-protocol-http-BM_qqgGS.js";const t=(e,t)=>(t.find(([t])=>t.match(e))||[void 0,void 0])[1],r={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},s={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function o(o,a,i){return{applyToStack:n=>{n.add(((r,s)=>(o,a)=>async i=>{const{response:n}=await o(i);try{return{response:n,output:await s(n,r)}}catch(d){if(Object.defineProperty(d,"$response",{value:n}),!("$metadata"in d)){const r="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";try{d.message+="\n  "+r}catch(c){a.logger&&"NoOpLogger"!==a.logger?.constructor?.name&&a.logger?.warn?.(r)}void 0!==d.$responseBodyText&&d.$response&&(d.$response.body=d.$responseBodyText);try{if(e.isInstance(n)){const{headers:e={}}=n,r=Object.entries(e);d.$metadata={httpStatusCode:n.statusCode,requestId:t(/^x-[\w-]+-request-?id$/,r),extendedRequestId:t(/^x-[\w-]+-id-2$/,r),cfId:t(/^x-[\w-]+-cf-id$/,r)}}}catch(c){}}throw d}})(o,i),r),n.add(((e,t)=>(r,s)=>async o=>{const a=e,i=s.endpointV2?.url&&a.urlParser?async()=>a.urlParser(s.endpointV2.url):a.endpoint;if(!i)throw new Error("No valid endpoint provider available.");const n=await t(o.input,{...e,endpoint:i});return r({...o,request:n})})(o,a),s)}}}export{o as g,s};
