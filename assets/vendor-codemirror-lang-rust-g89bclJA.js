import{p as e}from"./vendor-lezer-rust-UZy7aBua.js";import{L as r,c as o,d as n,f as t,e as s,k as m}from"./vendor-codemirror-language-D9Y_sbSd.js";import"./vendor-lezer-lr-CnaH20hO.js";import"./vendor-lezer-common-BNyJYURD.js";import"./vendor-lezer-highlight-BtpKku1v.js";import"./vendor-codemirror-state-d-AKQu11.js";import"./vendor-marijn-find-cluster-break-Dub_CRYN.js";import"./vendor-codemirror-view-CwWsG3pM.js";import"./vendor-style-mod-_NPnILvn.js";import"./vendor-w3c-keyname-f-y9tSbI.js";const i=r.define({name:"rust",parser:e.configure({props:[n.add({IfExpression:s({except:/^\s*({|else\b)/}),"String BlockComment":()=>null,AttributeItem:e=>e.continue(),"Statement MatchArm":s()}),t.add(e=>/(Block|edTokens|List)$/.test(e.name)?m:"BlockComment"==e.name?e=>({from:e.from+2,to:e.to-2}):void 0)]}),languageData:{commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:\{|\})$/,closeBrackets:{stringPrefixes:["b","r","br"]}}});function a(){return new o(i)}export{a as rust,i as rustLanguage};
