const t=t=>({setHttpHandler(s){t.httpHandler=s},httpHandler:()=>t.httpHandler,updateHttpClientConfig(s,n){t.httpHandler?.updateHttpClientConfig(s,n)},httpHandlerConfigs:()=>t.httpHandler.httpHandlerConfigs()}),s=t=>({httpHandler:t.httpHandler()});class n{constructor(t){this.method=t.method||"GET",this.hostname=t.hostname||"localhost",this.port=t.port,this.query=t.query||{},this.headers=t.headers||{},this.body=t.body,this.protocol=t.protocol?":"!==t.protocol.slice(-1)?`${t.protocol}:`:t.protocol:"https:",this.path=t.path?"/"!==t.path.charAt(0)?`/${t.path}`:t.path:"/",this.username=t.username,this.password=t.password,this.fragment=t.fragment}static clone(t){const s=new n({...t,headers:{...t.headers}});var e;return s.query&&(s.query=(e=s.query,Object.keys(e).reduce((t,s)=>{const n=e[s];return{...t,[s]:Array.isArray(n)?[...n]:n}},{}))),s}static isInstance(t){if(!t)return!1;const s=t;return"method"in s&&"protocol"in s&&"hostname"in s&&"path"in s&&"object"==typeof s.query&&"object"==typeof s.headers}clone(){return n.clone(this)}}class e{constructor(t){this.statusCode=t.statusCode,this.reason=t.reason,this.headers=t.headers||{},this.body=t.body}static isInstance(t){if(!t)return!1;const s=t;return"number"==typeof s.statusCode&&"object"==typeof s.headers}}export{e as H,n as a,t as g,s as r};
