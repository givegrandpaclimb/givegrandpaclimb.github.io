import{E as e,S as t,M as r,a as n,b as a}from"./vendor-smithy-eventstream-codec-D7IjiIV9.js";function o(e,t){return async function(r){const{value:n}=r.headers[":message-type"];if("error"===n){const e=new Error(r.headers[":error-message"].value||"UnknownError");throw e.name=r.headers[":error-code"].value,e}if("exception"===n){const n=r.headers[":exception-type"].value,a={[n]:r},o=await e(a);if(o.$unknown){const e=new Error(t(r.body));throw e.name=n,e}throw o[n]}if("event"===n){const t={[r.headers[":event-type"].value]:r},n=await e(t);if(n.$unknown)return;return n}throw Error(`Unrecognizable event type: ${r.headers[":event-type"].value}`)}}let s=class{constructor({utf8Encoder:t,utf8Decoder:r}){this.eventStreamCodec=new e(t,r),this.utfEncoder=t}deserialize(e,n){const a=function(e){let t=0,r=0,n=null,a=null;const o=e=>{if("number"!=typeof e)throw new Error("Attempted to allocate an event message where size was not a number: "+e);t=e,r=4,n=new Uint8Array(e),new DataView(n.buffer).setUint32(0,e,!1)};return{[Symbol.asyncIterator]:async function*(){const s=e[Symbol.asyncIterator]();for(;;){const{value:e,done:i}=await s.next();if(i){if(!t)return;if(t!==r)throw new Error("Truncated event message received.");return void(yield n)}const c=e.length;let u=0;for(;u<c;){if(!n){const t=c-u;a||(a=new Uint8Array(4));const n=Math.min(4-r,t);if(a.set(e.slice(u,u+n),r),r+=n,u+=n,r<4)break;o(new DataView(a.buffer).getUint32(0,!1)),a=null}const s=Math.min(t-r,c-u);n.set(e.slice(u,u+s),r),r+=s,u+=s,t&&t===r&&(yield n,n=null,t=0,r=0)}}}}}(e);return new t({messageStream:new r({inputStream:a,decoder:this.eventStreamCodec}),deserializer:o(n,this.utfEncoder)})}serialize(e,t){return new n({messageStream:new a({inputStream:e,serializer:t}),encoder:this.eventStreamCodec,includeEndFrame:!0})}};export{s as E};
