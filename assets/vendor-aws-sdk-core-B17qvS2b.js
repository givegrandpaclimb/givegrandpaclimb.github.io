import{H as e,a as n}from"./vendor-smithy-protocol-http-D-24QeOr.js";import{n as i,m as s,k as t,l as r,f as o}from"./vendor-smithy-core-Eai9z2ch.js";import{S as a}from"./vendor-smithy-signature-v4-CFRlPt2D.js";import{X as g}from"./vendor-fast-xml-parser-B0TduXgK.js";import{t as c}from"./vendor-smithy-util-utf8-MtSxxKG8.js";import{e as d}from"./vendor-smithy-smithy-client-D81FrGKs.js";function f(e,n,i){e.__aws_sdk_context?e.__aws_sdk_context.features||(e.__aws_sdk_context.features={}):e.__aws_sdk_context={features:{}},e.__aws_sdk_context.features[n]=i}const m=n=>e.isInstance(n)?n.headers?.date??n.headers?.Date:void 0,u=e=>new Date(Date.now()+e),l=(e,n)=>{const i=Date.parse(e);return((e,n)=>Math.abs(u(n).getTime()-e)>=3e5)(i,n)?i-Date.now():n},h=(e,n)=>{if(!n)throw new Error(`Property \`${e}\` is not resolved for AWS SDK SigV4Auth`);return n},p=async e=>{const n=h("context",e.context),i=h("config",e.config),s=n.endpointV2?.properties?.authSchemes?.[0],t=h("signer",i.signer),r=await t(s),o=e?.signingRegion,a=e?.signingRegionSet,g=e?.signingName;return{config:i,signer:r,signingRegion:o,signingRegionSet:a,signingName:g}};class v{async sign(e,i,s){if(!n.isInstance(e))throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");const t=await p(s),{config:r,signer:o}=t;let{signingRegion:a,signingName:g}=t;const c=s.context;if(c?.authSchemes?.length){const[e,n]=c.authSchemes;"sigv4a"===e?.name&&"sigv4"===n?.name&&(a=n?.signingRegion??a,g=n?.signingName??g)}return await o.sign(e,{signingDate:u(r.systemClockOffset),signingRegion:a,signingService:g})}errorHandler(e){return n=>{const i=n.ServerTime??m(n.$response);if(i){const s=h("config",e.config),t=s.systemClockOffset;s.systemClockOffset=l(i,s.systemClockOffset),s.systemClockOffset!==t&&n.$metadata&&(n.$metadata.clockSkewCorrected=!0)}throw n}}successHandler(e,n){const i=m(e);if(i){const e=h("config",n.config);e.systemClockOffset=l(i,e.systemClockOffset)}}}class w extends v{async sign(e,i,s){if(!n.isInstance(e))throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");const{config:t,signer:r,signingRegion:o,signingRegionSet:a,signingName:g}=await p(s),c=(await(t.sigv4aSigningRegionSet?.())??a??[o]).join(",");return await r.sign(e,{signingDate:u(t.systemClockOffset),signingRegion:c,signingService:g})}}const y=e=>(e.sigv4aSigningRegionSet=i(e.sigv4aSigningRegionSet),e),C=e=>{let n,o=e.credentials,g=!!e.credentials;Object.defineProperty(e,"credentials",{set(a){a&&a!==o&&a!==n&&(g=!0),o=a;const c=function(e,{credentials:n,credentialDefaultProvider:o}){let a;return a=n?n?.memoized?n:s(n,r,t):o?i(o(Object.assign({},e,{parentClientConfig:e}))):async()=>{throw new Error("@aws-sdk/core::resolveAwsSdkSigV4Config - `credentials` not provided and no credentialDefaultProvider was configured.")},a.memoized=!0,a}(e,{credentials:o,credentialDefaultProvider:e.credentialDefaultProvider}),d=function(e,n){if(n.configBound)return n;const i=async i=>n({...i,callerClientConfig:e});return i.memoized=n.memoized,i.configBound=!0,i}(e,c);g&&!d.attributed?(n=async e=>d(e).then(e=>function(e){return e.$source||(e.$source={}),e.$source.CREDENTIALS_CODE="e",e}(e)),n.memoized=d.memoized,n.configBound=d.configBound,n.attributed=!0):n=d},get:()=>n,enumerable:!0,configurable:!0}),e.credentials=o;const{signingEscapePath:c=!0,systemClockOffset:d=e.systemClockOffset||0,sha256:f}=e;let m;return m=e.signer?i(e.signer):e.regionInfoProvider?()=>i(e.region)().then(async n=>[await e.regionInfoProvider(n,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},n]).then(([n,i])=>{const{signingRegion:s,signingService:t}=n;e.signingRegion=e.signingRegion||s||i,e.signingName=e.signingName||t||e.serviceId;const r={...e,credentials:e.credentials,region:e.signingRegion,service:e.signingName,sha256:f,uriEscapePath:c};return new(e.signerConstructor||a)(r)}):async n=>{const s=(n=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await i(e.region)(),properties:{}},n)).signingRegion,t=n.signingName;e.signingRegion=e.signingRegion||s,e.signingName=e.signingName||t||e.serviceId;const r={...e,credentials:e.credentials,region:e.signingRegion,service:e.signingName,sha256:f,uriEscapePath:c};return new(e.signerConstructor||a)(r)},Object.assign(e,{systemClockOffset:d,signingEscapePath:c,signer:m})},k=(e,n)=>((e,n)=>o(e,n).then(e=>(n?.utf8Encoder??c)(e)))(e,n).then(e=>{if(e.length){const i=new g({attributeNamePrefix:"",htmlEntities:!0,ignoreAttributes:!1,ignoreDeclaration:!0,parseTagValue:!1,trimValues:!1,tagValueProcessor:(e,n)=>""===n.trim()&&n.includes("\n")?"":void 0});let s;i.addEntity("#xD","\r"),i.addEntity("#10","\n");try{s=i.parse(e,!0)}catch(n){throw n&&"object"==typeof n&&Object.defineProperty(n,"$responseBodyText",{value:e}),n}const t="#text",r=Object.keys(s)[0],o=s[r];return o[t]&&(o[r]=o[t],delete o[t]),d(o)}return{}}),E=async(e,n)=>{const i=await k(e,n);return i.Error&&(i.Error.message=i.Error.message??i.Error.Message),i},R=(e,n)=>void 0!==n?.Error?.Code?n.Error.Code:void 0!==n?.Code?n.Code:404==e.statusCode?"NotFound":void 0;export{v as A,y as a,E as b,w as c,R as l,k as p,C as r,f as s};
