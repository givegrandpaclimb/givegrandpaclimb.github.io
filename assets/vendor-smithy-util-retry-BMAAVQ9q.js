import{i as t}from"./vendor-smithy-service-error-classification-IwpPNb5_.js";var e,a;(a=e||(e={})).STANDARD="standard",a.ADAPTIVE="adaptive";const i=3,s=e.STANDARD;class r{constructor(t){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=t?.beta??.7,this.minCapacity=t?.minCapacity??1,this.minFillRate=t?.minFillRate??.5,this.scaleConstant=t?.scaleConstant??.4,this.smooth=t?.smooth??.8;const e=this.getCurrentTimeInSeconds();this.lastThrottleTime=e,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(t){if(this.enabled){if(this.refillTokenBucket(),t>this.currentCapacity){const e=(t-this.currentCapacity)/this.fillRate*1e3;await new Promise(t=>r.setTimeoutFn(t,e))}this.currentCapacity=this.currentCapacity-t}}refillTokenBucket(){const t=this.getCurrentTimeInSeconds();if(!this.lastTimestamp)return void(this.lastTimestamp=t);const e=(t-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+e),this.lastTimestamp=t}updateClientSendingRate(e){let a;if(this.updateMeasuredRate(),t(e)){const t=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=t,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),a=this.cubicThrottle(t),this.enableTokenBucket()}else this.calculateTimeWindow(),a=this.cubicSuccess(this.getCurrentTimeInSeconds());const i=Math.min(a,2*this.measuredTxRate);this.updateTokenBucketRate(i)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(t){return this.getPrecise(t*this.beta)}cubicSuccess(t){return this.getPrecise(this.scaleConstant*Math.pow(t-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(t){this.refillTokenBucket(),this.fillRate=Math.max(t,this.minFillRate),this.maxCapacity=Math.max(t,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){const t=this.getCurrentTimeInSeconds(),e=Math.floor(2*t)/2;if(this.requestCount++,e>this.lastTxRateBucket){const t=this.requestCount/(e-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(t*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=e}}getPrecise(t){return parseFloat(t.toFixed(8))}}r.setTimeoutFn=setTimeout;const n="amz-sdk-invocation-id",c="amz-sdk-request",h=({retryDelay:t,retryCount:e,retryCost:a})=>({getRetryCount:()=>e,getRetryDelay:()=>Math.min(2e4,t),getRetryCost:()=>a});class o{constructor(t){this.maxAttempts=t,this.mode=e.STANDARD,this.capacity=500,this.retryBackoffStrategy=(()=>{let t=100;return{computeNextBackoffDelay:e=>Math.floor(Math.min(2e4,Math.random()*2**e*t)),setDelayBase:e=>{t=e}}})(),this.maxAttemptsProvider="function"==typeof t?t:async()=>t}async acquireInitialRetryToken(t){return h({retryDelay:100,retryCount:0})}async refreshRetryTokenForRetry(t,e){const a=await this.getMaxAttempts();if(this.shouldRetry(t,e,a)){const a=e.errorType;this.retryBackoffStrategy.setDelayBase("THROTTLING"===a?500:100);const i=this.retryBackoffStrategy.computeNextBackoffDelay(t.getRetryCount()),s=e.retryAfterHint?Math.max(e.retryAfterHint.getTime()-Date.now()||0,i):i,r=this.getCapacityCost(a);return this.capacity-=r,h({retryDelay:s,retryCount:t.getRetryCount()+1,retryCost:r})}throw new Error("No retry token available")}recordSuccess(t){this.capacity=Math.max(500,this.capacity+(t.getRetryCost()??1))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch(t){return 3}}shouldRetry(t,e,a){return t.getRetryCount()+1<a&&this.capacity>=this.getCapacityCost(e.errorType)&&this.isRetryableError(e.errorType)}getCapacityCost(t){return"TRANSIENT"===t?10:5}isRetryableError(t){return"THROTTLING"===t||"TRANSIENT"===t}}class u{constructor(t,a){this.maxAttemptsProvider=t,this.mode=e.ADAPTIVE;const{rateLimiter:i}=a??{};this.rateLimiter=i??new r,this.standardRetryStrategy=new o(t)}async acquireInitialRetryToken(t){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(t)}async refreshRetryTokenForRetry(t,e){return this.rateLimiter.updateClientSendingRate(e),this.standardRetryStrategy.refreshRetryTokenForRetry(t,e)}recordSuccess(t){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(t)}}export{u as A,s as D,n as I,e as R,o as S,i as a,c as b};
