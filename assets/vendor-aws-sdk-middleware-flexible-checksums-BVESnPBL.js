import{s as e}from"./vendor-aws-sdk-core-B17qvS2b.js";import{i as r}from"./vendor-smithy-is-array-buffer-DPIx95ez.js";import{A as t}from"./vendor-aws-crypto-crc32c-dWFTHYV0.js";import{A as s}from"./vendor-aws-crypto-crc32-CfOvG1-N.js";import{a}from"./vendor-smithy-util-utf8-MtSxxKG8.js";import{c as o,a as n}from"./vendor-smithy-util-stream--lqQ3djc.js";import{a as c}from"./vendor-smithy-protocol-http-D-24QeOr.js";import{n as i}from"./vendor-smithy-util-middleware-I6Z6a_gz.js";const u="WHEN_SUPPORTED",C=u,m="WHEN_SUPPORTED",d=u;var h,l,E,f;(l=h||(h={})).MD5="MD5",l.CRC32="CRC32",l.CRC32C="CRC32C",l.CRC64NVME="CRC64NVME",l.SHA1="SHA1",l.SHA256="SHA256",(f=E||(E={})).HEADER="header",f.TRAILER="trailer";const S=h.CRC32,R=[h.CRC32,h.CRC32C,h.CRC64NVME,h.SHA1,h.SHA256],k=[h.SHA256,h.SHA1,h.CRC32,h.CRC32C,h.CRC64NVME],w=e=>e===h.MD5?"content-md5":`x-amz-checksum-${e.toLowerCase()}`,g=e=>void 0!==e&&"string"!=typeof e&&!ArrayBuffer.isView(e)&&!r(e),p=(e,r)=>{switch(e){case h.MD5:return r.md5;case h.CRC32:return s;case h.CRC32C:return t;case h.CRC64NVME:throw new Error('Please check whether you have installed the "@aws-sdk/crc64-nvme-crt" package explicitly. \nYou must also register the package by calling [require("@aws-sdk/crc64-nvme-crt");] or an ESM equivalent such as [import "@aws-sdk/crc64-nvme-crt";]. \nFor more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt');case h.SHA1:return r.sha1;case h.SHA256:return r.sha256;default:throw new Error(`Unsupported checksum algorithm: ${e}`)}},b=(e,r)=>{const t=new e;return t.update(a(r||"")),t.digest()},M={name:"flexibleChecksumsMiddleware",step:"build",tags:["BODY_CHECKSUM"],override:!0},H={name:"flexibleChecksumsInputMiddleware",toMiddleware:"serializerMiddleware",relation:"before",tags:["BODY_CHECKSUM"],override:!0},_=(e=[])=>{const r=[];for(const t of k)e.includes(t)&&R.includes(t)&&r.push(t);return r},A=async(e,{checksumAlgorithmFn:r,base64Encoder:t})=>t(await b(r,e)),y={name:"flexibleChecksumsResponseMiddleware",toMiddleware:"deserializerMiddleware",relation:"after",tags:["BODY_CHECKSUM"],override:!0},L=(r,t)=>({applyToStack:s=>{s.add(((r,t)=>(s,a)=>async n=>{if(!c.isInstance(n.request))return s(n);if(((e,r)=>{const t="x-amz-checksum-".toLowerCase();for(const s of Object.keys(r))if(s.toLowerCase().startsWith(t))return!0;return!1})(0,n.request.headers))return s(n);const{request:i,input:C}=n,{body:m,headers:d}=i,{base64Encoder:l,streamHasher:E}=r,{requestChecksumRequired:f,requestAlgorithmMember:k}=t,M=await r.requestChecksumCalculation(),H=k?.name,_=k?.httpHeader;H&&!C[H]&&(M===u||f)&&(C[H]=S,_&&(d[_]=S));const A=((e,{requestChecksumRequired:r,requestAlgorithmMember:t,requestChecksumCalculation:s})=>{if(!t)return s===u||r?S:void 0;if(!e[t])return;const a=e[t];if(!R.includes(a))throw new Error(`The checksum algorithm "${a}" is not supported by the client. Select one of ${R}.`);return a})(C,{requestChecksumRequired:f,requestAlgorithmMember:k?.name,requestChecksumCalculation:M});let y=m,L=d;if(A){switch(A){case h.CRC32:e(a,"FLEXIBLE_CHECKSUMS_REQ_CRC32","U");break;case h.CRC32C:e(a,"FLEXIBLE_CHECKSUMS_REQ_CRC32C","V");break;case h.CRC64NVME:e(a,"FLEXIBLE_CHECKSUMS_REQ_CRC64","W");break;case h.SHA1:e(a,"FLEXIBLE_CHECKSUMS_REQ_SHA1","X");break;case h.SHA256:e(a,"FLEXIBLE_CHECKSUMS_REQ_SHA256","Y")}const t=w(A),s=p(A,r);if(g(m)){const{getAwsChunkedEncodingStream:e,bodyLengthChecker:n}=r;y=e("number"==typeof r.requestStreamBufferSize&&r.requestStreamBufferSize>=8192?o(m,r.requestStreamBufferSize,a.logger):m,{base64Encoder:l,bodyLengthChecker:n,checksumLocationName:t,checksumAlgorithmFn:s,streamHasher:E}),L={...d,"content-encoding":d["content-encoding"]?`${d["content-encoding"]},aws-chunked`:"aws-chunked","transfer-encoding":"chunked","x-amz-decoded-content-length":d["content-length"],"x-amz-content-sha256":"STREAMING-UNSIGNED-PAYLOAD-TRAILER","x-amz-trailer":t},delete L["content-length"]}else if(!((e,r)=>{const t=e.toLowerCase();for(const s of Object.keys(r))if(t===s.toLowerCase())return!0;return!1})(t,d)){const e=await b(s,m);L={...d,[t]:l(e)}}}return await s({...n,request:{...i,headers:L,body:y}})})(r,t),M),s.addRelativeTo(((r,t)=>(s,a)=>async o=>{const n=o.input,{requestValidationModeMember:c}=t,i=await r.requestChecksumCalculation(),C=await r.responseChecksumValidation();switch(i){case"WHEN_REQUIRED":e(a,"FLEXIBLE_CHECKSUMS_REQ_WHEN_REQUIRED","a");break;case u:e(a,"FLEXIBLE_CHECKSUMS_REQ_WHEN_SUPPORTED","Z")}switch(C){case"WHEN_REQUIRED":e(a,"FLEXIBLE_CHECKSUMS_RES_WHEN_REQUIRED","c");break;case m:e(a,"FLEXIBLE_CHECKSUMS_RES_WHEN_SUPPORTED","b")}return c&&!n[c]&&C===m&&(n[c]="ENABLED"),s(o)})(r,t),H),s.addRelativeTo(((e,r)=>(t,s)=>async a=>{if(!c.isInstance(a.request))return t(a);const o=a.input,i=await t(a),u=i.response,{requestValidationModeMember:C,responseAlgorithms:m}=r;if(C&&"ENABLED"===o[C]){const{clientName:r,commandName:t}=s;if("S3Client"===r&&"GetObjectCommand"===t&&_(m).every(e=>{const r=w(e),t=u.headers[r];return!t||(e=>{const r=e.lastIndexOf("-");if(-1!==r){const t=e.slice(r+1);if(!t.startsWith("0")){const e=parseInt(t,10);if(!isNaN(e)&&e>=1&&e<=1e4)return!0}}return!1})(t)}))return i;await(async(e,{config:r,responseAlgorithms:t,logger:s})=>{const a=_(t),{body:o,headers:c}=e;for(const u of a){const t=w(u),a=c[t];if(a){let c;try{c=p(u,r)}catch(i){if(u===h.CRC64NVME){s?.warn(`Skipping ${h.CRC64NVME} checksum validation: ${i.message}`);continue}throw i}const{base64Encoder:C}=r;if(g(o))return void(e.body=n({expectedChecksum:a,checksumSourceLocation:t,checksum:new c,source:o,base64Encoder:C}));const m=await A(o,{checksumAlgorithmFn:c,base64Encoder:C});if(m===a)break;throw new Error(`Checksum mismatch: expected "${m}" but received "${a}" in response header "${t}".`)}}})(u,{config:e,responseAlgorithms:m,logger:s.logger})}return i})(r,t),y)}}),q=e=>{const{requestChecksumCalculation:r,responseChecksumValidation:t,requestStreamBufferSize:s}=e;return Object.assign(e,{requestChecksumCalculation:i(r??C),responseChecksumValidation:i(t??d),requestStreamBufferSize:Number(s??0)})};export{L as g,q as r};
