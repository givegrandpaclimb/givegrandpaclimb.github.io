import{E as e,S as r,M as t,a as n,b as o}from"./vendor-smithy-eventstream-codec-DOjmnHrE.js";function a(e,r){return async function(t){const{value:n}=t.headers[":message-type"];if("error"===n){const e=new Error(t.headers[":error-message"].value||"UnknownError");throw e.name=t.headers[":error-code"].value,e}if("exception"===n){const n=t.headers[":exception-type"].value,o={[n]:t},a=await e(o);if(a.$unknown){const e=new Error(r(t.body));throw e.name=n,e}throw a[n]}if("event"===n){const r={[t.headers[":event-type"].value]:t},n=await e(r);if(n.$unknown)return;return n}throw Error(`Unrecognizable event type: ${t.headers[":event-type"].value}`)}}let i=class{constructor({utf8Encoder:r,utf8Decoder:t}){this.eventStreamCodec=new e(r,t),this.utfEncoder=r}deserialize(e,n){const o=function(e){let r=0,t=0,n=null,o=null;const a=e=>{if("number"!=typeof e)throw new Error("Attempted to allocate an event message where size was not a number: "+e);r=e,t=4,n=new Uint8Array(e),new DataView(n.buffer).setUint32(0,e,!1)};return{[Symbol.asyncIterator]:async function*(){const i=e[Symbol.asyncIterator]();for(;;){const{value:e,done:s}=await i.next();if(s){if(!r)return;if(r!==t)throw new Error("Truncated event message received.");return void(yield n)}const c=e.length;let u=0;for(;u<c;){if(!n){const r=c-u;o||(o=new Uint8Array(4));const n=Math.min(4-t,r);if(o.set(e.slice(u,u+n),t),t+=n,u+=n,t<4)break;a(new DataView(o.buffer).getUint32(0,!1)),o=null}const i=Math.min(r-t,c-u);n.set(e.slice(u,u+i),t),t+=i,u+=i,r&&r===t&&(yield n,n=null,r=0,t=0)}}}}}(e);return new r({messageStream:new t({inputStream:o,decoder:this.eventStreamCodec}),deserializer:a(n,this.utfEncoder)})}serialize(e,r){return new n({messageStream:new o({inputStream:e,serializer:r}),encoder:this.eventStreamCodec,includeEndFrame:!0})}};export{i as E};
