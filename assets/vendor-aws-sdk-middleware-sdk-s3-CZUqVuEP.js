import{N as e}from"./vendor-smithy-smithy-client-CncVFqAY.js";import{a as t,H as r}from"./vendor-smithy-protocol-http-BM_qqgGS.js";import{h as s,o as n}from"./vendor-smithy-core-CFTV9i4d.js";import{S as i}from"./vendor-smithy-signature-v4-BP1tcyJ9.js";import{s as o}from"./vendor-aws-sdk-core-DSuZb7Cq.js";import{g as a}from"./vendor-smithy-util-middleware-CiYOBhdT.js";import{b as c,h as d}from"./vendor-smithy-util-stream-qKluyzXl.js";import{v as l}from"./vendor-aws-sdk-util-arn-parser-D1Tz_AIW.js";const u={step:"finalizeRequest",tags:["CHECK_CONTENT_LENGTH_HEADER"],name:"getCheckContentLengthHeaderPlugin",override:!0},p=r=>({applyToStack:r=>{r.add((r,s)=>async n=>{const{request:i}=n;if(t.isInstance(i)&&!("content-length"in i.headers)&&!("x-amz-decoded-content-length"in i.headers)){const t="Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.";"function"!=typeof s?.logger?.warn||s.logger instanceof e||s.logger.warn(t)}return r({...n})},u)}}),w={tags:["REGION_REDIRECT","S3"],name:"regionRedirectEndpointMiddleware",override:!0,relation:"before",toMiddleware:"endpointV2Middleware"},f={step:"initialize",tags:["REGION_REDIRECT","S3"],name:"regionRedirectMiddleware",override:!0},h=e=>({applyToStack:t=>{var r;t.add(function(e){return(t,r)=>async s=>{try{return await t(s)}catch(n){if(e.followRegionRedirects){const o=n?.$metadata?.httpStatusCode,a="HeadBucketCommand"===r.commandName,c=n?.$response?.headers?.["x-amz-bucket-region"];if(c&&(301===o||400===o&&("IllegalLocationConstraintException"===n?.name||a))){try{const t=c;r.logger?.debug(`Redirecting from ${await e.region()} to ${t}`),r.t=t}catch(i){throw new Error("Region redirect failed: "+i)}return t(s)}}throw n}}}(e),f),t.addRelativeTo((r=e,(e,t)=>async s=>{const n=await r.region(),i=r.region;let o=()=>{};t.t&&(Object.defineProperty(r,"region",{writable:!1,value:async()=>t.t}),o=()=>Object.defineProperty(r,"region",{writable:!0,value:i}));try{const i=await e(s);if(t.t&&(o(),n!==await r.region()))throw new Error("Region was not restored following S3 region redirect.");return i}catch(a){throw o(),a}}),w)}}),y={tags:["S3"],name:"s3ExpiresMiddleware",override:!0,relation:"after",toMiddleware:"deserializerMiddleware"},m=e=>({applyToStack:e=>{e.addRelativeTo((e,t)=>async n=>{const i=await e(n),{response:o}=i;if(r.isInstance(o)&&o.headers.expires){o.headers.expiresstring=o.headers.expires;try{s(o.headers.expires)}catch(a){t.logger?.warn(`AWS SDK Warning for ${t.clientName}::${t.commandName} response parsing (${o.headers.expires}): ${a}`),delete o.headers.expires}}return i},y)}});class E{data;lastPurgeTime=Date.now();static EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS=3e4;constructor(e={}){this.data=e}get(e){const t=this.data[e];if(t)return t}set(e,t){return this.data[e]=t,t}delete(e){delete this.data[e]}async purgeExpired(){const e=Date.now();if(!(this.lastPurgeTime+E.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS>e))for(const t in this.data){const r=this.data[t];if(!r.isRefreshing){const s=await r.identity;s.expiration&&s.expiration.getTime()<e&&delete this.data[t]}}}}class g{i;isRefreshing;accessed;constructor(e,t=!1,r=Date.now()){this.i=e,this.isRefreshing=t,this.accessed=r}get identity(){return this.accessed=Date.now(),this.i}}class S{createSessionFn;cache;static REFRESH_WINDOW_MS=6e4;constructor(e,t=new E){this.createSessionFn=e,this.cache=t}async getS3ExpressIdentity(e,t){const r=t.Bucket,{cache:s}=this,n=s.get(r);return n?n.identity.then(e=>(e.expiration?.getTime()??0)<Date.now()?s.set(r,new g(this.getIdentity(r))).identity:((e.expiration?.getTime()??0)<Date.now()+S.REFRESH_WINDOW_MS&&!n.isRefreshing&&(n.isRefreshing=!0,this.getIdentity(r).then(e=>{s.set(r,new g(Promise.resolve(e)))})),e)):s.set(r,new g(this.getIdentity(r))).identity}async getIdentity(e){await this.cache.purgeExpired().catch(e=>{});const t=await this.createSessionFn(e);if(!t.Credentials?.AccessKeyId||!t.Credentials?.SecretAccessKey)throw new Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");return{accessKeyId:t.Credentials.AccessKeyId,secretAccessKey:t.Credentials.SecretAccessKey,sessionToken:t.Credentials.SessionToken,expiration:t.Credentials.Expiration?new Date(t.Credentials.Expiration):void 0}}}const k="X-Amz-S3session-Token",v=k.toLowerCase();class R extends i{async signWithCredentials(e,t,r){const s=b(t);return e.headers[v]=t.sessionToken,C(this,s),this.signRequest(e,r??{})}async presignWithCredentials(e,t,r){const s=b(t);return delete e.headers[v],e.headers[k]=t.sessionToken,e.query=e.query??{},e.query[k]=t.sessionToken,C(this,s),this.presign(e,r)}}function b(e){return{accessKeyId:e.accessKeyId,secretAccessKey:e.secretAccessKey,expiration:e.expiration}}function C(e,t){const r=setTimeout(()=>{throw new Error("SignatureV4S3Express credential override was created but not called.")},10),s=e.credentialProvider;e.credentialProvider=()=>(clearTimeout(r),e.credentialProvider=s,Promise.resolve(t))}const T={name:"s3ExpressMiddleware",step:"build",tags:["S3","S3_EXPRESS"],override:!0},A=e=>({applyToStack:r=>{r.add((e=>(r,s)=>async n=>{if(s.endpointV2){const r=s.endpointV2,i="sigv4-s3express"===r.properties?.authSchemes?.[0]?.name;if(("S3Express"===r.properties?.backend||"Directory"===r.properties?.bucketType)&&(o(s,"S3_EXPRESS_BUCKET","J"),s.isS3ExpressBucket=!0),i){const r=n.input.Bucket;if(r){const i=await e.s3ExpressIdentityProvider.getS3ExpressIdentity(await e.credentials(),{Bucket:r});s.s3ExpressIdentity=i,t.isInstance(n.request)&&i.sessionToken&&(n.request.headers[v]=i.sessionToken)}}}return r(n)})(e),T)}}),M=e=>e=>{throw e},P=(e,t)=>{},I=e=>({applyToStack:r=>{r.addRelativeTo((e=>(r,s)=>async n=>{if(!t.isInstance(n.request))return r(n);const i=a(s).selectedHttpAuthScheme;if(!i)throw new Error("No HttpAuthScheme was selected: unable to sign request");const{httpAuthOption:{signingProperties:o={}},identity:c,signer:d}=i;let l;l=s.s3ExpressIdentity?await(async(e,t,r,s)=>{const n=await s.signWithCredentials(r,e,{});if(n.headers["X-Amz-Security-Token"]||n.headers["x-amz-security-token"])throw new Error("X-Amz-Security-Token must not be set for s3-express requests.");return n})(s.s3ExpressIdentity,0,n.request,await e.signer()):await d.sign(n.request,c,o);const u=await r({...n,request:l}).catch((d.errorHandler||M)(o));return(d.successHandler||P)(u.response,o),u})(e),n)}}),_=(e,{session:t})=>{const[r,s]=t,{forcePathStyle:n,useAccelerateEndpoint:i,disableMultiregionAccessPoints:o,followRegionRedirects:a,s3ExpressIdentityProvider:c,bucketEndpoint:d}=e;return Object.assign(e,{forcePathStyle:n??!1,useAccelerateEndpoint:i??!1,disableMultiregionAccessPoints:o??!1,followRegionRedirects:a??!1,s3ExpressIdentityProvider:c??new S(async e=>r().send(new s({Bucket:e}))),bucketEndpoint:d??!1})},x={CopyObjectCommand:!0,UploadPartCopyCommand:!0,CompleteMultipartUploadCommand:!0},D={relation:"after",toMiddleware:"deserializerMiddleware",tags:["THROW_200_EXCEPTIONS","S3"],name:"throw200ExceptionsMiddleware",override:!0},j=e=>({applyToStack:t=>{t.addRelativeTo((e=>(t,s)=>async n=>{const i=await t(n),{response:o}=i;if(!r.isInstance(o))return i;const{statusCode:a,body:l}=o;if(a<200||a>=300)return i;if("function"!=typeof l?.stream&&"function"!=typeof l?.pipe&&"function"!=typeof l?.tee)return i;let u=l,p=l;!l||"object"!=typeof l||l instanceof Uint8Array||([u,p]=await c(l)),o.body=p;const w=await((e=new Uint8Array,t)=>e instanceof Uint8Array?Promise.resolve(e):t.streamCollector(e)||Promise.resolve(new Uint8Array))(u,{streamCollector:async e=>d(e,3e3)});"function"==typeof u?.destroy&&u.destroy();const f=e.utf8Encoder(w.subarray(w.length-16));if(0===w.length&&x[s.commandName]){const e=new Error("S3 aborted request");throw e.name="InternalError",e}return f&&f.endsWith("</Error>")&&(o.statusCode=400),i})(e),D)}}),N={name:"bucketEndpointMiddleware",override:!0,relation:"after",toMiddleware:"endpointV2Middleware"},O={step:"initialize",tags:["VALIDATE_BUCKET_NAME"],name:"validateBucketNameMiddleware",override:!0},U=e=>({applyToStack:t=>{t.add(function({bucketEndpoint:e}){return t=>async r=>{const{input:{Bucket:s}}=r;if(!e&&"string"==typeof s&&!l(s)&&s.indexOf("/")>=0){const e=new Error(`Bucket name shouldn't contain '/', received '${s}'`);throw e.name="InvalidBucketName",e}return t({...r})}}(e),O),t.addRelativeTo(function(e){return(t,r)=>async s=>{if(e.bucketEndpoint){const e=r.endpointV2;if(e){const t=s.input.Bucket;if("string"==typeof t)try{const s=new URL(t);r.endpointV2={...e,url:s}}catch(n){const e=`@aws-sdk/middleware-sdk-s3: bucketEndpoint=true was set but Bucket=${t} could not be parsed as URL.`;throw"NoOpLogger"===r.logger?.constructor?.name||r.logger?.warn?.(e),n}}}return t(s)}}(e),N)}});export{R as S,U as a,h as b,A as c,I as d,m as e,p as f,j as g,_ as r};
