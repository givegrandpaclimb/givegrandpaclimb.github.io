import{H as e}from"./vendor-smithy-protocol-http-D-24QeOr.js";const r=(e,r)=>(r.find(([r])=>r.match(e))||[void 0,void 0])[1],t={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},s={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function o(o,a,n){return{applyToStack:i=>{i.add(((t,s)=>(o,a)=>async n=>{const{response:i}=await o(n);try{return{response:i,output:await s(i,t)}}catch(d){if(Object.defineProperty(d,"$response",{value:i}),!("$metadata"in d)){const t="Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.";try{d.message+="\n  "+t}catch(p){a.logger&&"NoOpLogger"!==a.logger?.constructor?.name&&a.logger?.warn?.(t)}void 0!==d.$responseBodyText&&d.$response&&(d.$response.body=d.$responseBodyText);try{if(e.isInstance(i)){const{headers:e={}}=i,t=Object.entries(e);d.$metadata={httpStatusCode:i.statusCode,requestId:r(/^x-[\w-]+-request-?id$/,t),extendedRequestId:r(/^x-[\w-]+-id-2$/,t),cfId:r(/^x-[\w-]+-cf-id$/,t)}}}catch(p){}}throw d}})(o,n),t),i.add(((e,r)=>(t,s)=>async o=>{const a=e,n=s.endpointV2?.url&&a.urlParser?async()=>a.urlParser(s.endpointV2.url):a.endpoint;if(!n)throw new Error("No valid endpoint provider available.");const i=await r(o.input,{...e,endpoint:n});return t({...o,request:i})})(o,a),s)}}}export{o as g,s};
