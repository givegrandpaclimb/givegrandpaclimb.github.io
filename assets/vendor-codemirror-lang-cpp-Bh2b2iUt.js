import{p as e}from"./vendor-lezer-cpp-CRRbeWa6.js";import{L as t,c as o,d as r,f as n,e as s,h as a,j as m,k as i}from"./vendor-codemirror-language-C3hkV707.js";import"./vendor-lezer-lr-CZr-wB1l.js";import"./vendor-lezer-common-QPiu6Hcj.js";import"./vendor-lezer-highlight-4-fykoed.js";import"./vendor-codemirror-state-D88w-V9V.js";import"./vendor-marijn-find-cluster-break-BFVNO93u.js";import"./vendor-codemirror-view-DVzN21hM.js";import"./vendor-style-mod-tLAqh-pC.js";import"./vendor-w3c-keyname-BorKtCV5.js";const c=t.define({name:"cpp",parser:e.configure({props:[r.add({IfStatement:s({except:/^\s*({|else\b)/}),TryStatement:s({except:/^\s*({|catch)\b/}),LabeledStatement:m,CaseStatement:e=>e.baseIndent+e.unit,BlockComment:()=>null,CompoundStatement:a({closing:"}"}),Statement:s({except:/^{/})}),n.add({"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList":i,BlockComment:e=>({from:e.from+2,to:e.to-2})})]}),languageData:{commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:case |default:|\{|\})$/,closeBrackets:{stringPrefixes:["L","u","U","u8","LR","UR","uR","u8R","R"]}}});function l(){return new o(c)}export{l as cpp,c as cppLanguage};
