const t={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},e=e=>({applyToStack:e=>{e.add((t,e)=>async i=>{try{const a=await t(i),{clientName:n,commandName:o,logger:r,dynamoDbDocumentClientOptions:m={}}=e,{overrideInputFilterSensitiveLog:u,overrideOutputFilterSensitiveLog:d}=m,l=u??e.inputFilterSensitiveLog,p=d??e.outputFilterSensitiveLog,{$metadata:c,...s}=a.output;return r?.info?.({clientName:n,commandName:o,input:l(i.input),output:p(s),metadata:c}),a}catch(a){const{clientName:t,commandName:n,logger:o,dynamoDbDocumentClientOptions:r={}}=e,{overrideInputFilterSensitiveLog:m}=r,u=m??e.inputFilterSensitiveLog;throw o?.error?.({clientName:t,commandName:n,input:u(i.input),error:a,metadata:a.$metadata}),a}},t)}});export{e as g};
