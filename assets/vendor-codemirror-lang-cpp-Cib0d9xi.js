import{p as e}from"./vendor-lezer-cpp-CaOtpPMU.js";import{L as t,c as o,d as r,f as n,e as a,h as s,j as m,k as i}from"./vendor-codemirror-language-D9Y_sbSd.js";import"./vendor-lezer-lr-CnaH20hO.js";import"./vendor-lezer-common-BNyJYURD.js";import"./vendor-lezer-highlight-BtpKku1v.js";import"./vendor-codemirror-state-d-AKQu11.js";import"./vendor-marijn-find-cluster-break-Dub_CRYN.js";import"./vendor-codemirror-view-CwWsG3pM.js";import"./vendor-style-mod-_NPnILvn.js";import"./vendor-w3c-keyname-f-y9tSbI.js";const c=t.define({name:"cpp",parser:e.configure({props:[r.add({IfStatement:a({except:/^\s*({|else\b)/}),TryStatement:a({except:/^\s*({|catch)\b/}),LabeledStatement:m,CaseStatement:e=>e.baseIndent+e.unit,BlockComment:()=>null,CompoundStatement:s({closing:"}"}),Statement:a({except:/^{/})}),n.add({"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList":i,BlockComment:e=>({from:e.from+2,to:e.to-2})})]}),languageData:{commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:case |default:|\{|\})$/,closeBrackets:{stringPrefixes:["L","u","U","u8","LR","UR","uR","u8R","R"]}}});function d(){return new o(c)}export{d as cpp,c as cppLanguage};
